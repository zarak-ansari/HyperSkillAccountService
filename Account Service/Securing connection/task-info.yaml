type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |
    import account.AccountServiceApplication;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import javax.net.ssl.*;
    import java.security.cert.X509Certificate;

    public class AccountServiceTest extends SpringTest {
      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      SSLSocket socket;
      java.security.cert.X509Certificate[] chain;

      // Warning!!! Only for testing reason, trust all certificates!
      TrustManager[] trustAllCerts = new TrustManager[] {
              new X509TrustManager() {
                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                  return new java.security.cert.X509Certificate[0];
                }
                public void checkClientTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
                public void checkServerTrusted(
                        java.security.cert.X509Certificate[] certs, String authType) {
                }
              }
      };

      // Test SSL
      public CheckResult checkCertificateName(String nameCN) {
        try {
          SSLContext sc = SSLContext.getInstance("SSL");
          //ТАК нельзя!!! доверяем всем сертификатам, только для тестирования и разработки!!!
          sc.init(null, trustAllCerts, new java.security.SecureRandom());
          SSLSocketFactory factory = sc.getSocketFactory();
          HttpRequest request = get("");
          socket = (SSLSocket) factory.createSocket(request.getHost(), request.getPort());
          getCertificates();
          if (findCert(nameCN)) {
            return CheckResult.correct();
          } else {
            throw new WrongAnswer("Not found certificate with CN - " + nameCN);
          }
        } catch (Exception e) {
          e.printStackTrace();
          System.out.println("Connection not found");
          throw new WrongAnswer("Can't establish https connection!");
        }
      }

      // Get certificate chain
      public void getCertificates() {
        try {
          chain = (X509Certificate[]) socket.getSession().getPeerCertificates();
        } catch (SSLPeerUnverifiedException e) {
          e.printStackTrace();
          System.out.println(e.toString());
        }
      }


      // Searching certificate by Common Name
      public boolean findCert(String subject) {
        for (java.security.cert.X509Certificate c : chain) {
          String subjectName = c.getSubjectDN().getName();
          System.out.println(subjectName + " " + c.getSigAlgName());
          if (subjectName.contains("CN=" + subject)) {
            return true;
          }
        }
        return false;
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[]{

              // Check certificate name
              () -> checkCertificateName("accountant_service"),
      };
    }
  learner_created: false
- name: src/account/auth/ChangeUserRoleDTO.java
  visible: true
  text: |
    package account.auth;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    public class ChangeUserRoleDTO {

        @NotBlank
        private String user;

        @NotBlank
        private String role;

        @NotBlank @Pattern(regexp = "GRANT|REMOVE")
        private String operation;

        public ChangeUserRoleDTO() {
        }

        public ChangeUserRoleDTO(String user, String role, String operation) {
            this.user = user;
            this.role = role;
            this.operation = operation;
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }

        //    @NotNull
    //    private String user;
    //
    //    @NotNull @Pattern(regexp = "ADMINISTRATOR|ACCOUNTANT|USER")
    //    private String role;
    //
    //    @NotNull @Pattern(regexp = "GRANT|REMOVE")
    //    private String operation;
    //
    //    public ChangeUserRoleDTO() {
    //    }
    //
    //    public ChangeUserRoleDTO(String user, String role, String operation) {
    //        this.user = user;
    //        this.role = role;
    //        this.operation = operation;
    //    }
    //
    //    public String getUser() {
    //        return user;
    //    }
    //
    //    public void setUser(String user) {
    //        this.user = user;
    //    }
    //
    //    public String getRole() {
    //        return role;
    //    }
    //
    //    public void setRole(String role) {
    //        this.role = role;
    //    }
    //
    //    public String getOperation() {
    //        return operation;
    //    }
    //
    //    public void setOperation(String operation) {
    //        this.operation = operation;
    //    }
    }
  learner_created: true
- name: src/account/auth/AdminController.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.*;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.Valid;
    import java.util.Map;

    @Controller
    @RequestMapping(value = "/api/admin/", method = {RequestMethod.GET, RequestMethod.DELETE, RequestMethod.PUT})
    public class AdminController {

        @Autowired
        UserDetailsServiceImpl userDetailsService;

        @PutMapping("user/role")
        public ResponseEntity changeUserRole(@RequestBody @Valid ChangeUserRoleDTO requestBody, HttpServletRequest request){
            return userDetailsService.changeUserRole(requestBody, request.getServletPath());
        }


        @DeleteMapping("user/{email}")
        public ResponseEntity deleteUser(@PathVariable String email, HttpServletRequest request){

            return userDetailsService.deleteUser(email, request.getServletPath());
        }

        @GetMapping("user")
        public ResponseEntity getAllUsers(){
            return userDetailsService.getAllUsers();
        }

        @PutMapping("user/access")
        public ResponseEntity lockOrUnlockUser(@RequestBody LockUnlockUserDTO lockUnlockUserDTO, HttpServletRequest request){
            return userDetailsService.lockOrUnlockUser(lockUnlockUserDTO, request.getServletPath());
        }

    }
  learner_created: true
- name: src/account/auth/AppUserRepository.java
  visible: true
  text: |-
    package account.auth;

    import org.springframework.data.jpa.repository.JpaRepository;

    import java.util.Optional;

    public interface AppUserRepository extends JpaRepository<AppUser, Long> {

        Optional<AppUser> findByEmailIgnoreCase(String username);

        void deleteByEmail(String email);
    }
  learner_created: true
- name: src/account/auth/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.http.HttpHeaders;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {

            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }



    }
  learner_created: true
- name: src/account/auth/AppUser.java
  visible: true
  text: |
    package account.auth;


    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;

    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import java.util.*;
    import java.util.stream.Collectors;

    @Entity
    public class AppUser implements UserDetails {

        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE)
        private long id;
        @NotEmpty @NotNull
        private String name;
        @NotEmpty @NotNull
        private String lastname;
        @NotEmpty @NotNull @Email
        private String email;
        @NotEmpty @NotNull @JsonIgnore
        private String password;

        @NotNull
        private boolean nonLocked;

        @NotNull
        private int failedAttempts;

        @ManyToMany(
                fetch = FetchType.EAGER,
                cascade = {
                        CascadeType.PERSIST,
                        CascadeType.MERGE
                }
        )
        private Set<Role> roles;

        public AppUser(long id, String name, String lastname, String email, String password) {
            this.id = id;
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.password = password;
            this.roles = new HashSet<>();
            this.nonLocked = true;
            this.failedAttempts = 0;
        }

        public AppUser() {
            this.roles = new HashSet<>();
            this.nonLocked = true;
            this.failedAttempts = 0;
        }

        @Override
        @JsonIgnore
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return this.roles;
        }

        public Collection<String> getRoles() {
            List<String> result = new ArrayList<>();
            for(Role role : this.roles){
                result.add(role.getAuthority());
            }

            return result.stream().sorted().collect(Collectors.toList());
        }

        public void addAuthority(Role authority){

            this.roles.add(authority);
        }

        public boolean removeAuthority(Role authority){
            if(this.roles.contains(authority)){
                this.roles.remove(authority);
                return true;
            } else {
                return false;
            }
        }


        @Override
        public String getPassword() {
            return password;
        }

        @Override
        @JsonIgnore
        public String getUsername() {
            return email;
        }

        @Override
        @JsonIgnore
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        @JsonIgnore
        public boolean isAccountNonLocked() {
            return this.nonLocked;
        }

        @Override
        @JsonIgnore
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        @JsonIgnore
        public boolean isEnabled() {
            return true;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName(){ return this.name; }
        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public void setNonLocked(boolean nonLocked){ this.nonLocked = nonLocked; }

        @JsonIgnore
        public int getFailedAttempts() {
            return failedAttempts;
        }

        public void setFailedAttempts(int failedAttempts) {
            this.failedAttempts = failedAttempts;
        }
    }
  learner_created: true
- name: src/account/auth/AuthenticationFailureListener.java
  visible: true
  text: |
    package account.auth;

    import account.entities.LogAction;
    import account.services.LogService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.http.HttpHeaders;
    import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent;
    import org.springframework.stereotype.Component;

    import javax.servlet.annotation.WebListener;
    import javax.servlet.http.HttpServletRequest;
    import java.util.Base64;

    @Component
    public class AuthenticationFailureListener implements ApplicationListener<AuthenticationFailureBadCredentialsEvent> {

        @Autowired
        private HttpServletRequest request;

        @Autowired
        private UserDetailsServiceImpl userDetailsService;

        @Autowired
        private LogService logService;

        @Override
        public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent event) {

            String username = event.getAuthentication().getName();

            String requestPath = request.getServletPath();

            logService.makeLogEntry(LogAction.LOGIN_FAILED, username, requestPath, requestPath);

            userDetailsService.incrementFailedAttempts(username, requestPath);

        }

    }
  learner_created: true
- name: src/account/auth/RoleLoader.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class RoleLoader {

        private RoleRepository roleRepository;

        @Autowired
        public RoleLoader(RoleRepository roleRepository) {
            this.roleRepository = roleRepository;
            createRoles();
        }



        private void createRoles(){
            try{
                roleRepository.save(new Role("ROLE_ADMINISTRATOR"));
                roleRepository.save(new Role("ROLE_ACCOUNTANT"));
                roleRepository.save(new Role("ROLE_USER"));
                roleRepository.save(new Role("ROLE_AUDITOR"));

            } catch (Exception e) {}
        }



    }
  learner_created: true
- name: src/account/auth/RoleRepository.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.data.jpa.repository.JpaRepository;

    import java.util.Optional;

    public interface RoleRepository extends JpaRepository<Role, Long> {

        Optional<Role> findByAuthority(String authority);
    }
  learner_created: true
- name: src/account/errorhandlers/CustomErrorHandler.java
  visible: true
  text: |-
    package account.errorhandlers;


    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ControllerAdvice;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.context.request.ServletWebRequest;

    import javax.validation.ConstraintViolationException;
    import java.io.IOException;

    @ControllerAdvice
    public class CustomErrorHandler {

        @ExceptionHandler(ConstraintViolationException.class)
        public void handleConstraintViolationException(ConstraintViolationException exception,
                                                       ServletWebRequest webRequest) throws IOException {
            webRequest.getResponse().sendError(HttpStatus.BAD_REQUEST.value(), exception.getMessage());
        }
    }
  learner_created: true
- name: src/account/DTOs/SignupDTO.java
  visible: true
  text: |
    package account.DTOs;

    import javax.validation.constraints.*;

    public class SignupDTO {

        @NotEmpty @NotNull
        private String name;
        @NotEmpty @NotNull
        private String lastname;
        @NotEmpty @NotNull @Email (regexp = ".+@acme\\.com$")
        private String email;
        @NotEmpty @NotNull
        @Size(min=12, message = "The password length must be at least 12 chars!")
        private String password;

        public SignupDTO() {
        }

        public SignupDTO(String name, String lastname, String email, String password) {
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.password = password;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
  learner_created: true
- name: src/account/auth/LockUnlockUserDTO.java
  visible: true
  text: |
    package account.auth;


    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;

    public class LockUnlockUserDTO {
        @NotBlank @NotNull
        private String user;

        @NotBlank
        @Pattern(regexp = "LOCK|UNLOCK")
        private String operation;

        public LockUnlockUserDTO() {
        }

        public LockUnlockUserDTO(String username, String operation) {
            this.user = username;
            this.operation = operation;
        }

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/controllers/LogController.java
  visible: true
  text: |
    package account.controllers;


    import account.entities.LogEntry;
    import account.services.LogService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;

    import java.util.List;


    @Controller
    @RequestMapping("/api/security/")
    public class LogController {


        @Autowired
        private LogService logService;

        @GetMapping("/events/")
        public ResponseEntity<List<LogEntry>> getAllEvents(){
            return logService.getAllEntries();
        }

    }
  learner_created: true
- name: src/account/DTOs/ChangePassDTO.java
  visible: true
  text: |
    package account.DTOs;

    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;

    public class ChangePassDTO {

        @NotNull
        private String new_password;

        public ChangePassDTO(String new_password) {
            this.new_password = new_password;
        }
        public ChangePassDTO() {
        }

        public String getNew_password() {
            return new_password;
        }

        public void setNew_password(String new_password) {
            this.new_password = new_password;
        }
    }
  learner_created: true
- name: src/account/auth/WebSecurityConfigurerAdapterImpl.java
  visible: true
  text: |
    package account.auth;

    import account.entities.LogAction;
    import account.services.LogService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.security.web.access.AccessDeniedHandlerImpl;
    import org.springframework.web.bind.annotation.ExceptionHandler;

    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;

    import java.io.IOException;

    import static java.util.Base64.getEncoder;

    @Configuration
    @EnableWebSecurity
    public class WebSecurityConfigurerAdapterImpl extends WebSecurityConfigurerAdapter {


        @Autowired
        private RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Autowired
        private LogService logService;

        public void configure(HttpSecurity http) throws Exception {
            http.httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
                    .antMatchers("/api/auth/changepass").authenticated()
                    .antMatchers("/api/empl/payment").hasAnyRole("ACCOUNTANT", "USER")
                    .antMatchers("/api/acct/payments").hasRole("ACCOUNTANT")
                    .antMatchers("/api/admin/**").hasRole("ADMINISTRATOR")
                    .antMatchers("/api/security/**").hasRole("AUDITOR")
    //                .antMatchers("/**").permitAll()
                    .and()
                    .exceptionHandling().accessDeniedHandler(accessDeniedHandler())
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public BCryptPasswordEncoder passwordEncoder(){
            return new BCryptPasswordEncoder();
        }

        @Bean
        public AccessDeniedHandler accessDeniedHandler() {


            return (request, response, ex) -> {
                logService.makeLogEntry(LogAction.ACCESS_DENIED, request.getServletPath(), request.getServletPath());
                response.sendError(HttpStatus.FORBIDDEN.value(), "Access Denied!");
            };
        }

    }
  learner_created: true
- name: src/account/controllers/AccountsController.java
  visible: true
  text: |
    package account.controllers;

    import account.entities.Payment;
    import account.services.AccountService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Controller;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;

    import javax.validation.Valid;
    import java.util.List;

    import java.util.Map;

    @Controller
    @Validated
    @RequestMapping("/api/acct/")
    public class AccountsController {

        @Autowired
        private AccountService accountService;

        @PostMapping(value = "payments")
        public ResponseEntity<Map<String, String>> uploadPayroll(@RequestBody List<@Valid Payment> paymentsList){
            return accountService.uploadPayroll(paymentsList);
        }

        @PutMapping("payments")
        public ResponseEntity<Map<String, String>> updatePayrollOfSpecificEmployee(@RequestBody @Valid Payment payment){
            return accountService.updatePayrollOfSpecificEmployee(payment);
        }

    }
  learner_created: true
- name: src/account/repositories/PaymentRepository.java
  visible: true
  text: |
    package account.repositories;


    import account.entities.Payment;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.stereotype.Repository;

    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends JpaRepository<Payment, Long> {
        Optional<Payment> findFirstByEmployeeAndPeriod(String email, String period);

        List<Payment> findByEmployeeOrderByPeriodDesc(String email);
    }
  learner_created: true
- name: src/account/controllers/EmployeeController.java
  visible: true
  text: |
    package account.controllers;


    import account.auth.AppUser;
    import account.auth.UserDetailsServiceImpl;
    import account.services.AccountService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Controller;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RequestParam;

    import java.util.Map;
    import java.util.List;

    @Controller
    @RequestMapping("api/empl/")
    public class EmployeeController {

        @Autowired
        private UserDetailsServiceImpl userDetailsService;

        @Autowired
        private AccountService accountService;


        @GetMapping(value = "payment", params={}) // defined params to differentiate from mapping with a period parameter
        public ResponseEntity<List<Map<String,String>>> getPayments(@AuthenticationPrincipal UserDetails userDetails){
            return accountService.getAllPaymentsOfEmployee(userDetails.getUsername());
        }

        @GetMapping(value="payment", params="period")
        public ResponseEntity<Map<String,String>> payment(@AuthenticationPrincipal UserDetails userDetails, @RequestParam String period){
            return accountService.getPaymentByPeriod(userDetails.getUsername(), period);
        }


    }
  learner_created: true
- name: src/account/services/AccountService.java
  visible: true
  text: |
    package account.services;

    import account.auth.AppUser;
    import account.auth.UserDetailsServiceImpl;
    import account.entities.Payment;
    import account.repositories.PaymentRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import javax.transaction.Transactional;
    import java.time.Month;
    import java.util.*;

    @Service
    public class AccountService {

        @Autowired
        private PaymentRepository paymentRepository;

        @Autowired
        private UserDetailsServiceImpl userDetailsService;



        public ResponseEntity<Map<String, String>> getPaymentByPeriod(String username, String period) {
            Optional<Payment> payment = paymentRepository.findFirstByEmployeeAndPeriod(username, period);
            if(!payment.isPresent()) throw new ResponseStatusException(HttpStatus.BAD_REQUEST);

            AppUser user = userDetailsService.loadUserByUsername(username);
            Payment paymentOut = payment.get();

            return ResponseEntity.ok(formatPayment(user, paymentOut));

        }

        public ResponseEntity<List<Map<String,String>>> getAllPaymentsOfEmployee(String username) {
            List<Payment> query = paymentRepository.findByEmployeeOrderByPeriodDesc(username);
            List<Map<String, String>> result = new ArrayList<>();
            AppUser user = userDetailsService.loadUserByUsername(username);

            for(Payment payment : query){
                result.add(formatPayment(user, payment));
            }
            return ResponseEntity.ok(result);

        }

        private Map<String, String> formatPayment(AppUser user, Payment payment){

            return new TreeMap<>(Map.of(
                    "name",user.getName(),
                    "lastname", user.getLastname(),
                    "period", formatPeriod(payment.getPeriod()),
                    "salary", formatSalary(payment.getSalary())
            ));

        }

        private String formatSalary(Long salary) {
            long dollars = (long) salary/100;
            long cents = salary % 100;
            return dollars + " dollar(s) " + cents + " cent(s)";
        }

        private String formatPeriod(String period){
            String[] parts = period.split("-");

            String month = Month.of(Integer.valueOf(parts[0])).name();
            month = month.charAt(0) + month.substring(1).toLowerCase();
            String year = parts[1];
            return month + "-" + year;
        }

        @Transactional
        public ResponseEntity<Map<String, String>> uploadPayroll(List<Payment> paymentsList) {

            HashMap<String, HashSet<String>> employeeToPeriods = new HashMap<>();

            for(Payment payment : paymentsList){

                String email = payment.getEmployee();
                if(!employeeToPeriods.containsKey(email)) employeeToPeriods.put(email, new HashSet<>());

                String currentPeriod = payment.getPeriod();
                if(userDetailsService.userExists(email) && !employeeToPeriods.get(email).contains(currentPeriod)){
                    paymentRepository.save(payment);
                    employeeToPeriods.get(email).add(currentPeriod);
                } else {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Error!");
                }
            }

            return ResponseEntity.ok(Map.of("status","Added successfully!"));
        }

        public ResponseEntity<Map<String, String>> updatePayrollOfSpecificEmployee(Payment newPayment){

            Optional<Payment> oldPayment = paymentRepository.findFirstByEmployeeAndPeriod(newPayment.getEmployee(), newPayment.getPeriod());
            if(oldPayment.isPresent()) {
                Payment paymentToBeSaved = oldPayment.get();
                paymentToBeSaved.setSalary(newPayment.getSalary());
                paymentRepository.save(paymentToBeSaved);
                return ResponseEntity.ok(Map.of("status","Updated successfully!"));
            } else {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Previous payment not found");
            }
        }

    }
  learner_created: true
- name: src/account/entities/LogEntry.java
  visible: true
  text: |
    package account.entities;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.format.annotation.DateTimeFormat;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import javax.validation.constraints.NotNull;
    import java.time.LocalDate;


    @Entity
    public class LogEntry {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @DateTimeFormat(pattern = "yyyy-MM-dd")
        private LocalDate date;

        @NotNull
        @Enumerated(EnumType.STRING)
        private LogAction action;

        @NotBlank
        private String subject;

        @NotBlank
        private String object;

        @NotBlank
        private String path;

        public LogEntry() {
        }

        public LogEntry(Long id, LocalDate date, LogAction action, String subject, String object, String path) {
            this.id = id;
            this.date = date;
            this.action = action;
            this.subject = subject;
            this.object = object;
            this.path = path;
        }

        @JsonIgnore
        public Long getId() {
            return id;
        }

        @JsonIgnore
        public LocalDate getDate() {
            return date;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public void setDate(LocalDate date) {
            this.date = date;
        }

        public LogAction getAction() {
            return action;
        }

        public void setAction(LogAction action) {
            this.action = action;
        }

        public String getSubject() {
            return subject;
        }

        public void setSubject(String subject) {
            this.subject = subject;
        }

        public String getObject() {
            return object;
        }

        public void setObject(String object) {
            this.object = object;
        }

        public String getPath() {
            return path;
        }

        public void setPath(String path) {
            this.path = path;
        }

        @Override
        public String toString() {
            return "LogEntry{" +
                    "id=" + id +
                    ", date=" + date +
                    ", action=" + action +
                    ", subject='" + subject + '\'' +
                    ", object='" + object + '\'' +
                    ", path='" + path + '\'' +
                    '}';
        }
    }
  learner_created: true
- name: src/account/auth/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.auth;

    import account.DTOs.SignupDTO;
    import account.entities.LogAction;
    import account.services.LogService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;


    import javax.transaction.Transactional;
    import java.util.Map;
    import java.util.Optional;
    import java.util.Set;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        private static final int MIN_PASSWORD_LENGTH = 12;

        private static final int ALLOWED_FAILED_ATTEMPTS_BEFORE_LOCK = 5;

        private static final Set<String> breachedPasswords = Set.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");

        @Autowired
        private LogService logService;

        @Autowired
        private AppUserRepository appUserRepository;

        @Autowired
        private RoleRepository roleRepository;

        @Autowired
        private PasswordEncoder passwordEncoder;

        @Override
        public AppUser loadUserByUsername(String email) throws UsernameNotFoundException {

            Optional<AppUser> user = appUserRepository.findByEmailIgnoreCase(email);
            if(user.isPresent()){
                return user.get();
            } else {
                throw new UsernameNotFoundException("Username not found");
            }
        }

        public boolean userExists(String email){
            Optional<AppUser> user = appUserRepository.findByEmailIgnoreCase(email);
            return user.isPresent();
        }

        @Transactional
        public ResponseEntity<Object> signupUser(SignupDTO userInput, String path){


            String newPassword = userInput.getPassword();
            if(isPasswordInListOfBreachedPasswords(newPassword)){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
            if(!isPasswordLongEnough(newPassword)){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password length must be 12 chars minimum!");
            }
            Optional<AppUser> userFromRepo = appUserRepository.findByEmailIgnoreCase(userInput.getEmail());
            if(userFromRepo.isPresent()) throw new UserExistException();

            AppUser user = new AppUser();
            user.setName(userInput.getName());
            user.setLastname(userInput.getLastname());
            user.setEmail(userInput.getEmail().toLowerCase());
            user.setPassword(passwordEncoder.encode(userInput.getPassword()));
            if(isFirstUser()) {
                user.addAuthority(roleRepository.findByAuthority("ROLE_ADMINISTRATOR").get());
            } else {
                user.addAuthority(roleRepository.findByAuthority("ROLE_USER").get());
            }
            appUserRepository.save(user);

            logService.makeLogEntry(LogAction.CREATE_USER, userInput.getEmail().toLowerCase(), path);

            return ResponseEntity.ok(user);

        }

        private boolean isFirstUser() {
            return appUserRepository.findAll().size() == 0;
        }


        @Transactional
        public ResponseEntity<Map<String, String>> changePassword(String newPassword, UserDetails userDetails, String path) {

            if(passwordEncoder.matches(newPassword, userDetails.getPassword())){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }
            if(isPasswordInListOfBreachedPasswords(newPassword)){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
            if(!isPasswordLongEnough(newPassword)){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Password length must be 12 chars minimum!");
            }

            AppUser user = loadUserByUsername(userDetails.getUsername());
            user.setPassword(passwordEncoder.encode(newPassword));
            appUserRepository.save(user);
            logService.makeLogEntry(LogAction.CHANGE_PASSWORD, user.getUsername(), path);
            return ResponseEntity.ok(Map.of(
                    "email",userDetails.getUsername(),
                    "status","The password has been updated successfully"
            ));
        }

        private boolean isPasswordLongEnough(String password){
            return password.length()>=MIN_PASSWORD_LENGTH;
        }

        private boolean isPasswordInListOfBreachedPasswords(String password){
            return breachedPasswords.contains(password);
        }

        public ResponseEntity changeUserRole(ChangeUserRoleDTO requestBody, String path) {
            String operation = requestBody.getOperation();

            String usernameInRequest = requestBody.getUser();
            String roleInRequest = requestBody.getRole();

            Optional<AppUser> userInOptional = appUserRepository.findByEmailIgnoreCase(usernameInRequest);
            if(!userInOptional.isPresent()) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            AppUser user = userInOptional.get();

            Optional<Role> roleInOptional = roleRepository.findByAuthority("ROLE_" + roleInRequest);
            if(!roleInOptional.isPresent()) throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Role not found!");
            Role role = roleInOptional.get();
            LogAction action; // Variable for logging
            String object; // Variable for logging
            if(operation.equals("GRANT")){
                checkBusinessAdminRoleConflict(user, role);
                checkIfUserAlreadyHasAuthority(user, role);
                user.addAuthority(role);
                action = LogAction.GRANT_ROLE;
                object = "Grant role "+ roleInRequest +" to " + user.getEmail();
            } else if(operation.equals("REMOVE")){
                checkIfRoleIsAdministrator(role, operation);
                checkIfUserDoesNotHaveAuthority(user, role);
                checkIfOnlyRemainingAuthority(user);
                user.removeAuthority(role);
                action = LogAction.REMOVE_ROLE;
                object = "Remove role "+ roleInRequest +" from " + user.getEmail();

            } else {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid operation");
            }

            logService.makeLogEntry(action, object, path);
            appUserRepository.save(user);
            return ResponseEntity.ok(user);
        }

        private void checkIfUserDoesNotHaveAuthority(AppUser user, Role role) {
            if(!user.getRoles().contains(role.getAuthority())){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user does not have a role!");
            }
        }

        private void checkBusinessAdminRoleConflict(AppUser user, Role role) {
            boolean isAdminUser = user.getRoles().contains("ROLE_ADMINISTRATOR");
            boolean isNewRoleAdmin = role.getAuthority().equals("ROLE_ADMINISTRATOR");

            if(isAdminUser != isNewRoleAdmin){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The user cannot combine administrative and business roles!");
            }


        }

        private void checkIfRoleIsAdministrator(Role role, String operation) {
            if(role.getAuthority().equals("ROLE_ADMINISTRATOR")){
                if(operation.equals("REMOVE")) {
                    throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
                }
            }
        }

        private void checkIfUserAlreadyHasAuthority(AppUser user, Role role) {
            if(user.getAuthorities().contains(role)){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User already has this role!");
            }
        }

        private void checkIfOnlyRemainingAuthority(AppUser user) {
            if(user.getAuthorities().size() == 1){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST,"The user must have at least one role!");
            }
        }

        @Transactional
        public ResponseEntity deleteUser(String email, String path) {
            Optional<AppUser> userOptional = appUserRepository.findByEmailIgnoreCase(email);

            if(!userOptional.isPresent()){
                throw new ResponseStatusException(HttpStatus.NOT_FOUND, "User not found!");
            }

            AppUser user = userOptional.get();
            if(user.getRoles().contains("ROLE_ADMINISTRATOR")){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't remove ADMINISTRATOR role!");
            }
            logService.makeLogEntry(LogAction.DELETE_USER, email, path);
            appUserRepository.deleteByEmail(email);

            return ResponseEntity.ok(Map.of("user", email, "status", "Deleted successfully!"));
        }

        public ResponseEntity getAllUsers() {
            return ResponseEntity.ok(appUserRepository.findAll());
        }

        @Transactional
        public ResponseEntity lockOrUnlockUser(LockUnlockUserDTO lockUnlockUserDTO, String path) {


            String username = lockUnlockUserDTO.getUser();
            boolean operationIsUnLock = lockUnlockUserDTO.getOperation().equals("UNLOCK") ? true : false;

            AppUser user = loadUserByUsername(username);

            if(!operationIsUnLock && user.getRoles().contains("ROLE_ADMINISTRATOR")){
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Can't lock the ADMINISTRATOR!");
            }

            user.setNonLocked(operationIsUnLock);

            String responseMessage;
            LogAction action;
            String object;

            if(operationIsUnLock){
                user.setFailedAttempts(0);
                responseMessage = "User " + user.getEmail() + " unlocked!" ;
                action = LogAction.UNLOCK_USER;
                object = "Unlock user " + user.getEmail();
            } else {
                responseMessage = "User " + user.getEmail() + " locked!" ;
                action = LogAction.LOCK_USER;
                object = "Lock user " + user.getEmail();
            }
            logService.makeLogEntry(action, object, path);
            return ResponseEntity.ok(Map.of("status", responseMessage));
        }

        public void incrementFailedAttempts(String username, String path) {

            AppUser user = loadUserByUsername(username);

            int newFailedAttempts = user.getFailedAttempts() + 1;

            user.setFailedAttempts(newFailedAttempts);
            if(newFailedAttempts >= 5 && !user.getRoles().contains("ROLE_ADMINISTRATOR")){
                user.setNonLocked(false);
                logService.makeLogEntry(LogAction.BRUTE_FORCE, user.getEmail(), path, path);
                logService.makeLogEntry(LogAction.LOCK_USER, user.getEmail(), "Lock user " + user.getEmail(), path);
            }

            appUserRepository.save(user);
        }

        public void resetFailedLogins(String username) {
            AppUser user = loadUserByUsername(username);
            user.setFailedAttempts(0);
            appUserRepository.save(user);
        }
    }
  learner_created: true
- name: src/account/entities/Payment.java
  visible: true
  text: |
    package account.entities;

    import javax.persistence.*;
    import javax.validation.constraints.*;

    @Entity
    @Table(uniqueConstraints = { @UniqueConstraint(columnNames = { "employee", "period" }) })
    public class Payment {
        @Id
        @GeneratedValue(strategy = GenerationType.SEQUENCE)
        @Column(name = "id", nullable = false)
        private Long id;

        @NotEmpty
        @Email
        private String employee;

        @NotEmpty
        @Pattern(regexp = "(1[0-2]|0[1-9])-[0-9]{4}", message = "Incorrect period format")
        private String period;

        @NotNull
        @Min(value = 0, message = "Salary must be non-negative")
        private Long salary;

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public Long getSalary() {
            return salary;
        }

        public void setSalary(Long salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/entities/LogAction.java
  visible: true
  text: |
    package account.entities;

    public enum LogAction {
        CREATE_USER,
        CHANGE_PASSWORD,
        ACCESS_DENIED,
        LOGIN_FAILED,
        GRANT_ROLE,
        REMOVE_ROLE,
        LOCK_USER,
        UNLOCK_USER,
        DELETE_USER,
        BRUTE_FORCE
    }
  learner_created: true
- name: src/account/repositories/LogEntryRepository.java
  visible: true
  text: |
    package account.repositories;

    import account.entities.LogAction;
    import account.entities.LogEntry;
    import org.springframework.data.jpa.repository.JpaRepository;
    import org.springframework.http.ResponseEntity;

    import java.util.List;

    public interface LogEntryRepository extends JpaRepository<LogEntry, Long> {

        List<LogEntry> findAllByOrderByIdAsc();
    }
  learner_created: true
- name: src/account/services/LogService.java
  visible: true
  text: |
    package account.services;

    import account.entities.LogAction;
    import account.entities.LogEntry;
    import account.repositories.LogEntryRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.stereotype.Service;

    import java.time.LocalDate;
    import java.util.List;

    @Service
    public class LogService {

        @Autowired
        private LogEntryRepository logEntryRepository;

        public void makeLogEntry(LogAction action, String object, String path){

            LogEntry entry = new LogEntry();

            entry.setAction(action);
            entry.setObject(object);
            entry.setPath(path);

            entry.setDate(LocalDate.now());
            entry.setSubject(getUsername());

            logEntryRepository.save(entry);
        }

        public void makeLogEntry(LogAction action, String subject, String object, String path){

            LogEntry entry = new LogEntry();

            entry.setAction(action);
            entry.setObject(object);
            entry.setPath(path);

            entry.setDate(LocalDate.now());
            entry.setSubject(subject);

            logEntryRepository.save(entry);
        }


        private String getUsername(){
    //        if(SecurityContextHolder.getContext().getAuthentication() == null) return "Anonymous";

            String usernameFromSecurityContext = SecurityContextHolder.getContext().getAuthentication().getName();
            if(usernameFromSecurityContext.equals("anonymousUser")){
                return "Anonymous";
            } else {
                return usernameFromSecurityContext;
            }
        }


        public ResponseEntity<List<LogEntry>> getAllEntries() {

            return ResponseEntity.ok(logEntryRepository.findAllByOrderByIdAsc());

        }
    }
  learner_created: true
- name: src/account/auth/UserExistException.java
  visible: true
  text: |
    package account.auth;


    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException {
    }
  learner_created: true
- name: src/account/auth/AuthController.java
  visible: true
  text: |
    package account.auth;

    import account.DTOs.SignupDTO;
    import account.DTOs.ChangePassDTO;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpRequest;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import javax.servlet.http.HttpServletRequest;
    import javax.validation.Valid;
    import java.util.Map;

    @RestController
    @RequestMapping("api/auth/")
    @Validated
    public class AuthController {

        @Autowired
        private UserDetailsServiceImpl userDetailsService;

        @Autowired
        private BCryptPasswordEncoder passwordEncoder;


        @PostMapping("signup")
        public ResponseEntity<Object> signup(HttpServletRequest request, @RequestBody @Valid SignupDTO input){

            return userDetailsService.signupUser(input, request.getServletPath());
        }

        @PostMapping("changepass")
        public ResponseEntity<Map<String, String>> changePass(@RequestBody @Valid ChangePassDTO changePassDTO,
                                                              @AuthenticationPrincipal UserDetails userDetails, HttpServletRequest request){
            return userDetailsService.changePassword(changePassDTO.getNew_password(), userDetails, request.getServletPath() );
        }
    }
  learner_created: true
- name: src/account/auth/AuthenticationSuccessListener.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.ApplicationListener;
    import org.springframework.security.authentication.event.AuthenticationSuccessEvent;
    import org.springframework.stereotype.Component;

    import javax.servlet.http.HttpServletRequest;

    @Component
    public class AuthenticationSuccessListener implements ApplicationListener<AuthenticationSuccessEvent> {

        @Autowired
        private HttpServletRequest request;

        @Autowired
        private UserDetailsServiceImpl userDetailsService;

        @Override
        public void onApplicationEvent(AuthenticationSuccessEvent event) {
            String username = event.getAuthentication().getName();
            userDetailsService.resetFailedLogins(username);
        }
    }
  learner_created: true
- name: src/account/auth/Role.java
  visible: true
  text: |
    package account.auth;

    import org.springframework.security.core.GrantedAuthority;

    import javax.persistence.*;
    import javax.validation.constraints.NotBlank;
    import java.util.Set;

    @Entity
    public class Role implements GrantedAuthority {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;

        @NotBlank @Column(unique=true)
        private String authority;

        @ManyToMany(mappedBy = "roles")
        private Set<AppUser> users;

        public Role(){}

        public Role(String name){
            this.authority = name;
        }

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getAuthority() {
            return authority;
        }

        public void setAuthority(String authority) {
            this.authority = authority;
        }

        @Override
        public boolean equals(Object other) {

            /* Check if o is an instance of Complex or not
              "null instanceof [type]" also returns false */
            if (!(other instanceof Role)) {
                return false;
            }

            // If the object is compared with itself then return true
            if (other == this) {
                return true;
            }

            // typecast o to Complex so that we can compare data members
            Role otherRole = (Role) other;

            // Compare the data members and return accordingly
            return this.getAuthority().equals(otherRole.getAuthority());
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16607#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Wed, 08 Feb 2023 17:18:32 UTC"
record: -1
